import Head from "next/head";
import { useState, useRef, useEffect } from "react";
import Image from "next/image";
import Upcoming from "@/components/Upcoming";
import Card from "@/components/Card";
import Check from "@/components/Check";

export default function Home() {
  // Set the default numbers or allow a new set
  const [numbers, setNumbers] = useState(
    "7, 4, 9, 5, 11, 17, 23, 2, 0, 14, 21, 24, 10, 16, 13, 6, 15, 25, 12, 22, 18, 20, 8, 19, 3, 26, 1,"
  );

  const numbersNoCommas = numbers.replace(/,/g, "");

  const [willBeCalled, setWillBeCalled] = useState([]);

  // Set the defautl card or allow a new one
  const [card, setCard] = useState([
    [1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1],
  ]);

  const cardPretty = card.map((array) => array.join(" ")).join("\n");

  function formatCard(e) {
    const input = e;
    const rows = input.split("\n");
    const arrays = rows.map((row) => row.split(" ").map(Number));

    const matrix = new Array(arrays.length);

    for (let i = 0; i < arrays.length; i++) {
      matrix[i] = new Array(arrays[i].length);
      for (let j = 0; j < arrays[i].length; j++) {
        matrix[i][j] = arrays[i][j];
      }
    }
    setCard(matrix);
    console.log(matrix);
  }

  const numbersEntered = useRef(null);

  const handleBingoCheck = (e) => {
    e.preventDefault();
    // first, lets seperate these numbers into an array
    const newArray = numbers.split(" ").map((number) => parseInt(number, 10));
    setWillBeCalled(newArray);
  };

  useEffect(() => {
    // Check if this card has a bingo!
    bingo() && console.log("BINGO!!!");
  }, [willBeCalled]);

  // Check for Bingo!

  // Now we need to turn the bingo card into an array

  // This will remember the numbers that have already come
  const called = [];

  // Test to see if we have got bingo!
  function bingo() {
    // Check rows
    for (let row = 0; row < 5; row++) {
      if (card[row].every((number) => called.includes(number))) {
        return true;
      }
    }

    // Test down the column
    for (let col = 0; col < 5; col++) {
      if (card.every((row) => called.includes(row[col]))) {
        return true;
      }
    }

    // Test top left to bottom right
    if (
      card[0][0] === 0 &&
      card[1][1] === 2 &&
      card[2][2] === 14 &&
      card[3][3] === 18 &&
      card[4][4] === 19
    ) {
      return true;
    }

    // ...and the other way
    if (
      card[0][4] === 22 &&
      card[1][3] === 4 &&
      card[2][2] === 14 &&
      card[3][1] === 16 &&
      card[4][0] === 1
    ) {
      return true;
    }

    return false;
  }

  // Now we have to go through all of the numbers that have been called and see if they are on out card
  for (let i = 0; i < willBeCalled.length; i++) {
    const nextNumber = willBeCalled[i];

    if (nextNumber >= 0 && nextNumber <= 26) {
      // Check if the number is on the card
      for (let row = 0; row < 5; row++) {
        for (let col = 0; col < 5; col++) {
          if (card[row][col] === nextNumber) {
            called.push(nextNumber);
            break;
          }
        }
      }
    }
  }

  return (
    <>
      <Head>
        <title>Bingo checker</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container mx-auto mt-10">
        <div className="text-4xl">
          <h1>Bingo! checker</h1>
        </div>

        <div>
          <Upcoming
            numbersNoCommas={numbersNoCommas}
            numbersEntered={numbersEntered}
            handleBingoCheck={handleBingoCheck}
            setNumbers={setNumbers}
          ></Upcoming>
        </div>

        <div className="mt-5">
          <Card cardPretty={cardPretty} formatCard={formatCard}></Card>
        </div>

        <div className="mt-5">
          <Check handleBingoCheck={handleBingoCheck}></Check>
        </div>
      </div>
    </>
  );
}
